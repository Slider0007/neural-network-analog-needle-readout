name: Train Model

on:
  workflow_dispatch:
    inputs:
      script_choice:
        description: 'Select a notebook'
        required: true
        type: choice
        options:
          - "02_Train-CNN_ana-cont_s0.ipynb"
          - "02_Train-CNN_ana-cont_s1.ipynb"
          - "02_Train-CNN_ana-cont_s2.ipynb"
          - "02_Train-CNN_ana-cont_s3.ipynb"
          - "Custom Notebook Name"
      custom_name:
        description: 'Custom Notebook Name: Enter the full notebook name (optional)'
        required: false
        type: string
      tflite_version:
        description: 'Model Version: Enter model version (e.g. 0100 -> 01.00)'
        required: true
        type: string
      rawimage_dir:
        description: 'Raw Images Directory: Enter directory (optional, default: data_raw_all)'
        required: false
        type: string
      commit_to_branch:
        description: 'Commit result to actual branch (optional, default: false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  run-notebook:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache virtual environment
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-

    - name: Install dependencies
      run: |
        if [ ! -d "$PWD/.venv" ]; then
          python -m venv "$PWD/.venv"
        fi
        source "$PWD/.venv/bin/activate"
        pip install --upgrade pip
        pip install jupyter nbconvert papermill
        pip install -r requirements.txt

    - name: Prepare environment
      run: |
        # Prepare model version
        version="${{ github.event.inputs.tflite_version }}"
        if [[ -z "$version" ]]; then
          version=$(date +'%Y%m%d-%H%M')
        fi
        echo "MODELVERSION=\"$version\"" >> $GITHUB_ENV


        # Check notebook
        if [[ "${{ github.event.inputs.script_choice }}" == "Custom Notebook Name" ]]; then
          # Add .ipynb extension if not provided
          notebook="${{ github.event.inputs.custom_name }}"
          if [[ ! "$notebook" =~ \.ipynb$ ]]; then
            notebook="$notebook.ipynb"
          fi
          # Check if notebook exists before running
          if [[ ! -f "$notebook" ]]; then
            echo "Error: Notebook '$notebook' not found!"
            exit 1
          fi
          echo "NOTEBOOK=\"$notebook\"" >> $GITHUB_ENV
          echo "NOTEBOOK_BASENAME=$(basename $notebook .ipynb)" >> $GITHUB_ENV
        else
          if [[ ! -f "${{ github.event.inputs.script_choice }}" ]]; then
            echo "Error: Notebook '${{ github.event.inputs.script_choice }}' not found!"
            exit 1
          fi
          echo "NOTEBOOK=\"${{ github.event.inputs.script_choice }}\"" >> $GITHUB_ENV
          # Extract notebook name without extention and cut "02_Train-"
          echo "NOTEBOOK_BASENAME=$(basename "${{ github.event.inputs.script_choice }}" .ipynb | cut -c 11-) >> $GITHUB_ENV
        fi


        # Prepare folder structure
        if [ -n "${{ github.event.inputs.rawimage_dir }}" ]; then
          echo "RAWIMAGEDIR=\"${{ github.event.inputs.rawimage_dir }}\"" >> $GITHUB_ENV
        else
          echo "RAWIMAGEDIR=\"data_raw_all\"" >> $GITHUB_ENV
        fi

        mkdir -p data_resize_all/
        echo "DATASETDIR=\"data_resize_all\"" >> $GITHUB_ENV

        mkdir -p models_tmp/
        echo "MODELDIR=\"models_tmp\"" >> $GITHUB_ENV

    - name: Prepare image dataset (Image loading, resizing, ...)
      run: |
        set -e
        source "$PWD/.venv/bin/activate"

        output_notebook="${{ env.MODELDIR }}/01_Image-Preparation_result_v${{ env.MODELVERSION }}.ipynb"
        papermill "01_Image-Preparation.ipynb" "$output_notebook" -p Input_Dir "${{ env.RAWIMAGEDIR }}" -p Output_Dir "${{ env.DATASETDIR }}" --log-output --log-level INFO --progress-bar
        
        # Convert the output notebook to HTML
        jupyter nbconvert "$output_notebook" --to html --output-dir="${{ env.MODELDIR }}/"
      shell: bash

    - name: Train model
      run: |
        set -e
        source "$PWD/.venv/bin/activate"

        output_notebook="${{ env.MODELDIR }}/${{ env.NOTEBOOK }}_result_v${{ env.MODELVERSION }}.ipynb"
        papermill "${{ env.NOTEBOOK }}" "$output_notebook" -p TFlite_Version "${{ env.MODELVERSION }}" -p Output_Dir "${{ env.MODELDIR }}" --log-output --log-level INFO --progress-bar

        # Convert the output notebook to HTML
        jupyter nbconvert "$output_notebook" --to html --output-dir="${{ env.MODELDIR }}/"

    - name: Compare models
      run: |
        set -e
        source "$PWD/.venv/bin/activate"

        output_notebook="${{ env.MODELDIR }}/03_Compare_Models.ipynb_result_v${{ env.MODELVERSION }}.ipynb"
        papermill "03_Compare_Models.ipynb" "$output_notebook" -p Input_Dir "${{ env.RAWIMAGEDIR }}" --log-output --log-level INFO --progress-bar

        # Convert the output notebook to HTML
        jupyter nbconvert "$output_notebook" --to html --output-dir="${{ env.MODELDIR }}/"

    - name: Upload models as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.NOTEBOOK_BASENAME }}_v${{ env.MODELVERSION }}
        path: |
          ${{ env.MODELDIR }}/

    - name: Commit to current branch
      if: ${{ github.event.inputs.commit_to_branch == 'true' && github.ref != 'refs/heads/main' }}
      run: |
        set -e

        # Configure Git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

        # Ensure base directories exist
        mkdir -p models
        mkdir -p "models/details/${{ env.NOTEBOOK_BASENAME }}_v${{ env.MODELVERSION }}"

        # Move .tflite files to appropriate subfolders or /models
        find "${{ env.MODELDIR }}" -type f -name "*.tflite" | while read -r filepath; do
          filename=$(basename "$filepath")

          if [[ "$filename" == *"ana-cont"* ]]; then
            subfolder="ana-cont"
          elif [[ "$filename" == *"ana-class100"* ]]; then
            subfolder="ana-class100"
          else
            subfolder=""
          fi

          dest="models/$subfolder"
          [[ -z "$subfolder" ]] && dest="models"

          mkdir -p "$dest"
          mv "$filepath" "$dest/"
        done

        # Move all other files (non-.tflite) to the details folder
        find "${{ env.MODELDIR }}" -type f ! -name "*.tflite" | while read -r filepath; do
          mv "$filepath" "models/details/${{ env.NOTEBOOK_BASENAME }}_v${{ env.MODELVERSION }}/"
        done

        # Remove the original model directory
        rm -rf "${{ env.MODELDIR }}"

        # Stage changes
        git add models/
        git commit -m "Add models from ${{ env.NOTEBOOK_BASENAME }}_v${{ env.MODELVERSION }}"
        git push